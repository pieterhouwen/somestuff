#/bin/bash
# This program will turn a regular PFX file into a seperate .crt and .key file
function usage () {
 echo Usage: $0 -i \[[inputfile\]] -c \[[certificate outputfile\]] -k \[[key outputfile\]]
 echo Leave -c and -k blank for default name.
 echo
 echo Example: $0 -i example.org.pfx -c certificate.crt -k privkey.key
 echo Or:
 echo -e Example: $0 -i example.org.pfx \(this will give you example.org.crt and example.org.key\)
 echo
}

function checkfile () {
 if [[ ! -f $1 ]]; then
  echo $1 not found!
  exit 1
 fi
}

# Initialize variables
inputfile=
outputcert=
outputkey=

# Check if arguments were given
if [[ -z "$1" ]]; then
 echo No arguments were given!
 usage
 exit 1
else
 while getopts "i:c:k:" args 2>/dev/null; do
  case $args in
   i)
    inputfile="$OPTARG";;
   c)
     outputcert="$OPTARG";;
   k)
     outputkey="$OPTARG";;
   ?)
    echo Invalid arguments
    usage
    exit 1;;
   *)
    echo Invalid arguments
    usage
    exit 1;;
  esac
done
fi

# Some error checking
checkfile $inputfile

# Now onto the actual program
# First get the basename of the .pfx file
# To do this, first find how many dots are in the filename
# Escape the . or things will go haywire

# Find the number of dots
dotcount=$(echo $inputfile | grep -o "\." | wc -l)
# Now use that as a field number to get the actual basename
basename=$(echo $inputfile | cut -d "." -f -$dotcount)

# Step 1: Extract encrypted keyfile from PFX
echo Please enter the password \(if any\) to read the PFX file.
echo After that please enter the new password to your encrypted keyfile. THIS MUST BE DONE.
if [[ $outputkey == "" ]]; then
echo Extracting encrypted key...
openssl pkcs12 -in $inputfile -nocerts -out $basename.enckey
if [[ $outputcert == "" ]]; then
echo Extracting certificate file...
openssl pkcs12 -in $inputfile -clcerts -nokeys -out $basename.crt
else
echo Extracting certificate file...
openssl pkcs12 -in $inputfile -clcerts -nokeys -out $outputcert
fi
else 
echo Extracting encrypted key...
openssl pkcs12 -in $inputfile -nocerts -out $outputkey.enckey
fi
echo Please enter encrypted keyfile password.
if [[ $outputkey == "" ]]; then
echo Extracting cleartext private key...
openssl rsa -in $basename.enckey -out $basename.key
else
echo Extracting cleartext private key...
openssl rsa -in $outputkey.enckey -out $outputkey.key
fi

# Cleanup
rm $outputkey.enckey

