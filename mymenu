#!/bin/bash

# if 'brew doctor' returns non-zero you fucked up

# if brew doctor >dev/null; then
# echo command went succesfully, no faults found!
# else
# echo Brew pkg's not installed properly!
# fi
# dpkg -V = verify
# Nu pacman nog...

# sudo pacman -Qkk | tee /tmp/tempfile | grep -v '0 altered files'
# We're only interested in files being changed.




##########################
#                        #
# Article I: Definitions #
#                        #
##########################

# Search for package manager and store in variable
if [[ -f /usr/bin/pacman ]] ; then
	echo Pacman found!
	pkgmgr="pacman"
	pkgupd="pacman -Syy"
	pkgupg="pacman -Suy"
	pkgins="pacman -Sy "
	pkgsrc="pacman -Q "
###########################################
#                                         #
# Start sorting different pacman distro's #
#                                         #
###########################################
elif [[ -f /usr/bin/apt ]]; then
	pkgmgr="apt"
	pkgupd="apt update"
	pkgupg="apt upgrade -y"
	pkgins="apt install -y"
	pkgsrc="dpkg --get-selections | grep "
	repodir="/etc/apt"
	repolist="/etc/apt/sources.list"
	custrepodir="/etc/apt/sources.list.d"
elif [[ -f /usr/bin/brew ]]; then
	pkgmgr="brew"
	pkgupd="brew update"
	pkgupg="brew upgrade"
	pkgins="brew install"
elif [[ -f /usr/bin/yum ]]; then
	pkgmgr="yum"
	pkgupd="yum update"
	# pkgupg="yum upgrade" #Don't know if this is correct?
	pkgins="yum install"
else
	echo Package manager not found!
	echo Some features of this program will not work.
	echo
fi

##################################
#                                #
# Build a menu building function #
#                                #
##################################

function buildmenu () {
echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
N=0
for i in "$@"
do
N=$(expr $N + 1)
echo Option $N is: $i
done
echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
echo
echo Please select your choice:
}

##########################
#                        #
# Define our main menu.  #
#                        #
##########################

function mainmenu () {
while true
	do
		# PS3="Please choose an option "
		# Populate it with options, maybe we should write something to dynamically edit these options.
		buildmenu "Network settings" "System settings" "Recovery settings" "User settings" Quit
		read optMain
			case $optMain in
				1)
					networkmenu ;;
				2)
					systemmenu ;;
				3)
					recoverymenu ;;
				3)
					usermenu ;;
				4)
					exit 0
			esac
	done
}


#########################
#                       #
# Define our submenu's. #
#                       #
#########################


function networkmenu () {
# Setup menu options for Network
while true
	do
	buildmenu IPtables "Add virtual host to apache or nginx" "Back to main menu"
	read optNet
		case $optNet in
			1)
				iptablesmenu ;;
			2)
				addvirthostmenu ;;
			3)
				mainmenu ;;
		esac
	done
}

function systemmenu () {
while true
	do
	# Setup menu options for System
	buildmenu "View crontab" "Update system" "Reset/repair pacman" "Add executable as service" "Back to main menu"
	read optSystem
			case $optSystem in
				1)
					echo Who are you interested in viewing the cron?
					read cronuser
					bash modules/viewcron.sh -u $cronuser
					;;
				2)
					echo Updating repositories....
					$pkgupd
					echo Starting full system upgrade....
					$pkgupg
					;;
				3)
					echo Checking internal package manager database...
					;;
				4)
					echo Please enter the full path of the executable to be turned into a service.
					read file
					bash modules/makeservice.sh $file
					;;
				5)
					mainmenu
					;;
			esac
	done
}

function recoverymenu () {
while true
	do
	buildmenu "Reset/repair package repositories" "Check integrity of installed packages" "Back to main menu"
	read optRecovery
		case $optRecovery in
			1)
				repodir="/etc/apt"
				custrepodir="/etc/apt/sources.list.d"
				;;
			2)
				:
				;;
			3)
				mainmenu
				;;
		esac
	done
}

function usermenu () {
while true
	do
		buildmenu "view path" "View homefolder space" "Main menu"
		read optUser
		case $optUser in # Maak eerst een variabel aan voordat je hem probeert uit te lezen -_-
			1)
				echo Your current path is: $PATH ;;
			2)
				echo Your homefolder is $(du -hd 1 ~ | tail -n 1 | cut -f 1) big. ;;
			3)
				mainmenu ;;
		esac
	done
}

function iptablesmenu () {
while true
	do
	buildmenu "List IPtables chains" "Forward a port on the local system" "Main menu"
	read optIptables
		case $optIptables in
			1)
					echo The current IPtables chains are:
					iptables -L | grep -i chains
					;;
				2)
					echo Please provide external port nr:
					read extport
					echo External port set to $extport.
					echo Please provide internal port nr:
					read intport
					echo Internal port set to $intport
					# echo Please provide internal IP address to forward to:
					# read destIP
					# TODO: actually make it do something.
					# iptables -A INPUT -p any :D :D :D
					;;
				3)
					mainmenu
					;;
			esac
		done
}

function addvirthostmenu () {
while true
	do
	buildmenu "Add Apache virtualhost" "Add nginx virtualhost" "Back to main menu"
	read optAddvirthost
		case $optAddvirthost in
			1)
				if [[ ! -d /etc/apache2 ]]; then
					echo Apache doesn't seem installed, installing it now.
					$pkginst apache2
				fi
				echo What hostname would you like to add? Please use a FQDN.
				read hostname
				echo Hostname set to $hostname
				if grep -ir "servername $hostname" /etc/apache2 >/dev/null; then
					echo Looks like you already have a virtualhost called ${hostname}, quitting!!
					exit 1
				fi
				

# We should find out which package manager the user is using.
# First let's start with apt because apt

#

mainmenu

